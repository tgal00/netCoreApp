// <auto-generated />
using System;
using CoffeeShops.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShops.DAL.Migrations
{
    [DbContext(typeof(CoffeeShopManagerDbContext))]
    [Migration("20220610105952_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShops.Model.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CoffeeShops.Model.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Zagreb"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Split"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Rijeka"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Osijek"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Zadar"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Velika Gorica"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Slavonski Brod"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Pula"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Karlovac"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Sisak"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Varaždin"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Šibenik"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Dubrovnik"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Bjelovar"
                        },
                        new
                        {
                            ID = 15,
                            Name = "Kaštela"
                        },
                        new
                        {
                            ID = 16,
                            Name = "Samobor"
                        },
                        new
                        {
                            ID = 17,
                            Name = "Vinkovci"
                        },
                        new
                        {
                            ID = 18,
                            Name = "Koprivnica"
                        },
                        new
                        {
                            ID = 19,
                            Name = "Vukovar"
                        },
                        new
                        {
                            ID = 20,
                            Name = "Đakovo"
                        },
                        new
                        {
                            ID = 21,
                            Name = "Čakovec"
                        },
                        new
                        {
                            ID = 22,
                            Name = "Požega"
                        },
                        new
                        {
                            ID = 23,
                            Name = "Zaprešić"
                        },
                        new
                        {
                            ID = 24,
                            Name = "Sinj"
                        },
                        new
                        {
                            ID = 25,
                            Name = "Petrinja"
                        },
                        new
                        {
                            ID = 26,
                            Name = "Solin"
                        },
                        new
                        {
                            ID = 27,
                            Name = "Kutina"
                        },
                        new
                        {
                            ID = 28,
                            Name = "Virovitica"
                        },
                        new
                        {
                            ID = 29,
                            Name = "Križevci"
                        },
                        new
                        {
                            ID = 30,
                            Name = "Sveta Nedelja"
                        },
                        new
                        {
                            ID = 31,
                            Name = "Dugo Selo"
                        },
                        new
                        {
                            ID = 32,
                            Name = "Metković"
                        },
                        new
                        {
                            ID = 33,
                            Name = "Poreč"
                        },
                        new
                        {
                            ID = 34,
                            Name = "Našice"
                        },
                        new
                        {
                            ID = 35,
                            Name = "Sveti Ivan Zelina"
                        },
                        new
                        {
                            ID = 36,
                            Name = "Jastrebarsko"
                        },
                        new
                        {
                            ID = 37,
                            Name = "Knin"
                        },
                        new
                        {
                            ID = 38,
                            Name = "Omiš"
                        },
                        new
                        {
                            ID = 39,
                            Name = "Vrbovec"
                        },
                        new
                        {
                            ID = 40,
                            Name = "Ivanić-Grad"
                        },
                        new
                        {
                            ID = 41,
                            Name = "Rovinj"
                        },
                        new
                        {
                            ID = 42,
                            Name = "Nova Gradiška"
                        },
                        new
                        {
                            ID = 43,
                            Name = "Makarska"
                        },
                        new
                        {
                            ID = 44,
                            Name = "Ogulin"
                        },
                        new
                        {
                            ID = 45,
                            Name = "Ivanec"
                        },
                        new
                        {
                            ID = 46,
                            Name = "Slatina"
                        },
                        new
                        {
                            ID = 47,
                            Name = "Umag"
                        },
                        new
                        {
                            ID = 48,
                            Name = "Novska"
                        },
                        new
                        {
                            ID = 49,
                            Name = "Trogir"
                        },
                        new
                        {
                            ID = 50,
                            Name = "Novi Marof"
                        },
                        new
                        {
                            ID = 51,
                            Name = "Gospić"
                        },
                        new
                        {
                            ID = 52,
                            Name = "Krapina"
                        },
                        new
                        {
                            ID = 53,
                            Name = "Županja"
                        },
                        new
                        {
                            ID = 54,
                            Name = "Opatija"
                        },
                        new
                        {
                            ID = 55,
                            Name = "Labin"
                        },
                        new
                        {
                            ID = 56,
                            Name = "Daruvar"
                        },
                        new
                        {
                            ID = 57,
                            Name = "Valpovo"
                        },
                        new
                        {
                            ID = 58,
                            Name = "Pleternica"
                        },
                        new
                        {
                            ID = 59,
                            Name = "Crikvenica"
                        },
                        new
                        {
                            ID = 60,
                            Name = "Duga Resa"
                        },
                        new
                        {
                            ID = 61,
                            Name = "Benkovac"
                        },
                        new
                        {
                            ID = 62,
                            Name = "Imotski"
                        },
                        new
                        {
                            ID = 63,
                            Name = "Belišće"
                        },
                        new
                        {
                            ID = 64,
                            Name = "Kastav"
                        },
                        new
                        {
                            ID = 65,
                            Name = "Garešnica"
                        },
                        new
                        {
                            ID = 66,
                            Name = "Ploče"
                        },
                        new
                        {
                            ID = 67,
                            Name = "Beli Manastir"
                        },
                        new
                        {
                            ID = 68,
                            Name = "Otočac"
                        },
                        new
                        {
                            ID = 69,
                            Name = "Donji Miholjac"
                        },
                        new
                        {
                            ID = 70,
                            Name = "Trilj"
                        },
                        new
                        {
                            ID = 71,
                            Name = "Glina"
                        },
                        new
                        {
                            ID = 72,
                            Name = "Zabok"
                        },
                        new
                        {
                            ID = 73,
                            Name = "Vodice"
                        },
                        new
                        {
                            ID = 74,
                            Name = "Pazin"
                        },
                        new
                        {
                            ID = 75,
                            Name = "Pakrac"
                        },
                        new
                        {
                            ID = 76,
                            Name = "Ludbreg"
                        },
                        new
                        {
                            ID = 77,
                            Name = "Đurđevac"
                        },
                        new
                        {
                            ID = 78,
                            Name = "Lepoglava"
                        },
                        new
                        {
                            ID = 79,
                            Name = "Bakar"
                        },
                        new
                        {
                            ID = 80,
                            Name = "Čazma"
                        },
                        new
                        {
                            ID = 81,
                            Name = "Mali Lošinj"
                        },
                        new
                        {
                            ID = 82,
                            Name = "Rab"
                        },
                        new
                        {
                            ID = 83,
                            Name = "Ozalj"
                        },
                        new
                        {
                            ID = 84,
                            Name = "Prelog"
                        },
                        new
                        {
                            ID = 85,
                            Name = "Drniš"
                        },
                        new
                        {
                            ID = 86,
                            Name = "Senj"
                        },
                        new
                        {
                            ID = 87,
                            Name = "Ilok"
                        },
                        new
                        {
                            ID = 88,
                            Name = "Pregrada"
                        },
                        new
                        {
                            ID = 89,
                            Name = "Vrgorac"
                        },
                        new
                        {
                            ID = 90,
                            Name = "Grubišno Polje"
                        },
                        new
                        {
                            ID = 91,
                            Name = "Varaždinske Toplice"
                        },
                        new
                        {
                            ID = 92,
                            Name = "Otok"
                        },
                        new
                        {
                            ID = 93,
                            Name = "Mursko Središće"
                        },
                        new
                        {
                            ID = 94,
                            Name = "Krk"
                        },
                        new
                        {
                            ID = 95,
                            Name = "Lipik"
                        },
                        new
                        {
                            ID = 96,
                            Name = "Kutjevo"
                        },
                        new
                        {
                            ID = 97,
                            Name = "Vodnjan"
                        },
                        new
                        {
                            ID = 98,
                            Name = "Oroslavje"
                        },
                        new
                        {
                            ID = 99,
                            Name = "Buzet"
                        },
                        new
                        {
                            ID = 100,
                            Name = "Zlatar"
                        },
                        new
                        {
                            ID = 101,
                            Name = "Delnice"
                        },
                        new
                        {
                            ID = 102,
                            Name = "Donja Stubica"
                        },
                        new
                        {
                            ID = 103,
                            Name = "Korčula"
                        },
                        new
                        {
                            ID = 104,
                            Name = "Biograd na Moru"
                        },
                        new
                        {
                            ID = 105,
                            Name = "Orahovica"
                        },
                        new
                        {
                            ID = 106,
                            Name = "Novi Vinodolski"
                        },
                        new
                        {
                            ID = 107,
                            Name = "Buje"
                        },
                        new
                        {
                            ID = 108,
                            Name = "Slunj"
                        },
                        new
                        {
                            ID = 109,
                            Name = "Vrbovsko"
                        },
                        new
                        {
                            ID = 110,
                            Name = "Kraljevica"
                        },
                        new
                        {
                            ID = 111,
                            Name = "Obrovac"
                        },
                        new
                        {
                            ID = 112,
                            Name = "Novigrad"
                        },
                        new
                        {
                            ID = 113,
                            Name = "Hvar"
                        },
                        new
                        {
                            ID = 114,
                            Name = "Supetar"
                        },
                        new
                        {
                            ID = 115,
                            Name = "Pag"
                        },
                        new
                        {
                            ID = 116,
                            Name = "Čabar"
                        },
                        new
                        {
                            ID = 117,
                            Name = "Skradin"
                        },
                        new
                        {
                            ID = 118,
                            Name = "Novalja"
                        },
                        new
                        {
                            ID = 119,
                            Name = "Opuzen"
                        },
                        new
                        {
                            ID = 120,
                            Name = "Klanjec"
                        },
                        new
                        {
                            ID = 121,
                            Name = "Cres"
                        },
                        new
                        {
                            ID = 122,
                            Name = "Hrvatska Kostajnica"
                        },
                        new
                        {
                            ID = 123,
                            Name = "Nin"
                        },
                        new
                        {
                            ID = 124,
                            Name = "Stari Grad"
                        },
                        new
                        {
                            ID = 125,
                            Name = "Vrlika"
                        },
                        new
                        {
                            ID = 126,
                            Name = "Vis"
                        },
                        new
                        {
                            ID = 127,
                            Name = "Komiža"
                        });
                });

            modelBuilder.Entity("CoffeeShops.Model.CoffeeShop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosesAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpensAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CityID");

                    b.ToTable("CoffeeShops");
                });

            modelBuilder.Entity("CoffeeShops.Model.MenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("CoffeeShopID")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("CoffeeShopID");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShops.Model.CoffeeShop", b =>
                {
                    b.HasOne("CoffeeShops.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShops.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CoffeeShops.Model.MenuItem", b =>
                {
                    b.HasOne("CoffeeShops.Model.CoffeeShop", "CoffeeShop")
                        .WithMany("MenuItems")
                        .HasForeignKey("CoffeeShopID");

                    b.Navigation("CoffeeShop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShops.Model.CoffeeShop", b =>
                {
                    b.Navigation("MenuItems");
                });
#pragma warning restore 612, 618
        }
    }
}
